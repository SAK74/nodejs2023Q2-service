openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UsersController_findAll
      summary: Get all users
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        "401": &a1
          description: Unauthorized.
      tags: &a2
        - Users
    post:
      operationId: UsersController_create
      summary: Add user
      description: Add simple user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Bad request
        "401": *a1
      tags: *a2
  "/user/{id}":
    get:
      operationId: UsersController_findOne
      summary: Get certain user
      description: Get user with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Bad request
        "401": *a1
        "404":
          description: Entity not exist
      tags: *a2
    put:
      operationId: UsersController_passwChange
      summary: Change password
      description: Change user password
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Bad request
        "401": *a1
        "403":
          description: Wrong password.
        "404":
          description: Entity not exist
      tags: *a2
    delete:
      operationId: UsersController_remove
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: User has been deleted successfully
        "400":
          description: Bad request
        "401": *a1
        "404":
          description: Entity not exist
      tags: *a2
  /artist:
    get:
      operationId: ArtistsController_findAll
      summary: Get all artists
      description: Get all artists
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
        "401": &a3
          description: Unauthorized.
      tags: &a4
        - Artists
    post:
      operationId: ArtistsController_create
      summary: Add single artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: Bad request
        "401": *a3
      tags: *a4
  "/artist/{id}":
    get:
      operationId: ArtistsController_findOne
      summary: Get single artists
      description: Get single artists
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: Bad request
        "401": *a3
        "404":
          description: Entity not exist
      tags: *a4
    put:
      operationId: ArtistsController_update
      summary: Edit single artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: Bad request
        "401": *a3
        "404":
          description: Entity not exist
      tags: *a4
    delete:
      operationId: ArtistsController_remove
      summary: Delete artist entity
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Entity has been deleted successfully
        "400":
          description: Bad request
        "401": *a3
        "404":
          description: Entity not exist
      tags: *a4
  /track:
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: ""
    get:
      operationId: TracksController_findAll
      parameters: []
      responses:
        "200":
          description: ""
  "/track/{id}":
    get:
      operationId: TracksController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
    put:
      operationId: TracksController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "200":
          description: ""
    delete:
      operationId: TracksController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /album:
    get:
      operationId: AlbumsController_findAll
      summary: Get all albums
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        "401": &a5
          description: Unauthorized
      tags: &a6
        - Albums
    post:
      operationId: AlbumsController_create
      summary: Add single album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: Bad request
        "401": *a5
      tags: *a6
  "/album/{id}":
    get:
      operationId: AlbumsController_findOne
      summary: Get single album
      description: Get single album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: Bad request
        "401": *a5
        "404":
          description: Entity not found
      tags: *a6
    put:
      operationId: AlbumsController_update
      summary: Edit single album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: Bad request
        "401": *a5
        "404":
          description: Entity not found
      tags: *a6
    delete:
      operationId: AlbumsController_remove
      summary: Delete single album
      description: Delete album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Entity has been deleted successfully
        "400":
          description: Bad request
        "401": *a5
        "404":
          description: Entity not found
      tags: *a6
  "/favs/{member}/{id}":
    post:
      operationId: FavoritesController_addMemberToFavorite
      parameters:
        - name: member
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
    delete:
      operationId: FavoritesController_removeFromFavs
      parameters:
        - name: member
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /favs:
    get:
      operationId: FavoritesController_findAll
      parameters: []
      responses:
        "200":
          description: ""
  /auth/signup:
    post:
      operationId: AuthController_signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: ""
  /auth/refresh:
    post:
      operationId: AuthController_refresh
      parameters: []
      responses:
        "200":
          description: ""
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    UserDto:
      type: object
      properties:
        createdAt:
          type: number
          example: 1696956256066
        updatedAt:
          type: number
          example: 1696956256067
        version:
          type: number
          example: 1
        id:
          type: string
          format: uuid
        login:
          type: string
          example: Mike12
      required:
        - createdAt
        - updatedAt
        - version
        - id
        - login
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: John Lenon
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
      required:
        - name
        - artistId
        - albumId
        - duration
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Imagine
        year:
          type: number
          example: 1971
        artistId:
          type: string
          nullable: true
          format: uuid
      required:
        - id
        - name
        - year
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Imagine
        year:
          type: number
          example: 1971
        artistId:
          type: string
          nullable: true
          format: uuid
      required:
        - name
        - year
