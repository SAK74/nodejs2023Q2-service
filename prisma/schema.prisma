// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  login     String   @db.VarChar()
  password  String   @db.VarChar()
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @db.VarChar()
  grammy    Boolean
  Album     Album[]
  Track     Track[]
  FavArtist FavArtist[]
}

model Album {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @db.VarChar()
  year      Int
  artistId  String?    @db.Uuid
  artist    Artist?    @relation(fields: [artistId], references: [id])
  Track     Track[]
  FavsAlbum FavAlbum[]
}

model Track {
  id       String     @id @default(uuid()) @db.Uuid
  name     String     @db.VarChar()
  duration Int
  artistId String?    @db.Uuid
  artist   Artist?    @relation(fields: [artistId], references: [id])
  albumId  String?    @db.Uuid
  album    Album?     @relation(fields: [albumId], references: [id])
  FavTrack FavTrack[]
}

model FavArtist {
  artistId String @unique @db.Uuid
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@id([artistId])
}

model FavAlbum {
  albumId String @unique @db.Uuid
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@id([albumId])
}

model FavTrack {
  trackId String @unique @db.Uuid
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([trackId])
}
